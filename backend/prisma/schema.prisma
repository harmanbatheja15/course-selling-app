// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Student {
    id           String       @id @default(cuid())
    name         String
    email        String
    password     String
    isActive     Boolean      @default(true)
    avatar       String?
    instructorId String?
    instructor   Instructor?  @relation(fields: [instructorId], references: [id])
    enrollments  Enrollment[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@unique([email, instructorId])
}

model Instructor {
    id           String    @id @default(cuid())
    name         String
    email        String    @unique
    password     String
    logo         String?
    organization String    @unique
    slug         String    @unique
    url          String?   @unique
    description  String?
    courses      Course[]
    students     Student[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Admin {
    id        String   @id @default(cuid())
    name      String
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Course {
    id            String         @id @default(cuid())
    instructorId  String
    instructor    Instructor     @relation(fields: [instructorId], references: [id])
    title         String
    description   String?
    price         Int
    thumbnailUrl  String
    level         String? // beginner, intermediate, advanced
    type          Type?
    startDate     DateTime?
    endDate       DateTime?
    enrollments   Enrollment[]
    courseFolders CourseFolder[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model CourseFolder {
    id             String          @id @default(uuid())
    name           String
    courseId       String
    course         Course          @relation(fields: [courseId], references: [id])
    courseContents CourseContent[]

    @@unique([courseId, name])
}

model CourseContent {
    id             String       @id @default(uuid())
    name           String
    type           ContentTypes
    url            String
    courseFolderId String
    courseFolder   CourseFolder @relation(fields: [courseFolderId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Enrollment {
    id         String   @id @default(cuid())
    studentId  String
    courseId   String
    student    Student  @relation(fields: [studentId], references: [id])
    course     Course   @relation(fields: [courseId], references: [id])
    enrolledAt DateTime @default(now())

    @@unique([studentId, courseId])
}

enum Type {
    LIVE
    RECORDED
}

enum ContentTypes {
    VIDEO
    ASSIGNMENT
}
